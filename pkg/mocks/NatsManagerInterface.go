// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import nats_manager "github.com/ProtocolONE/nats/pkg"
import stan "github.com/nats-io/"

// NatsManagerInterface is an autogenerated mock type for the NatsManagerInterface type
type NatsManagerInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *NatsManagerInterface) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: _a0, _a1, _a2
func (_m *NatsManagerInterface) Publish(_a0 string, _a1 interface{}, _a2 bool) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, bool) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueueSubscribe provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *NatsManagerInterface) QueueSubscribe(_a0 string, _a1 string, _a2 nats_manager.MsgHandler, _a3 ...stan.SubscriptionOption) (nats_manager.Subscription, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 nats_manager.Subscription
	if rf, ok := ret.Get(0).(func(string, string, nats_manager.MsgHandler, ...stan.SubscriptionOption) nats_manager.Subscription); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats_manager.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, nats_manager.MsgHandler, ...stan.SubscriptionOption) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
